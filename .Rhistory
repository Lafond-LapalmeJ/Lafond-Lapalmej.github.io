salary = data.frame(salary)
#salary$pos[which(salary$pos == "GAR")] = "G"
salary$pos[which(salary$pos == "CA")] = "HQ"
ind_sal = which(toupper(salary$name) %in% toupper(data_pool$name))
salary$name[-ind_sal]
ind_pool = which(toupper(data_pool$name) %in% toupper(salary$name))
data_pool$name[-ind_pool]
data_pool[which(data_pool$name == "Tyler Toffoli"),]
#data_pool[grepl(x=data_pool$name,pattern = "Mat"),]
#salary = salary[-which(salary$Name %in% c("Tyson Barrie")),]
dupSalary = which(salary$name == names(which(table(factor(salary$name)) > 1)))
dupPool = which(data_pool$name == names(which(table(factor(data_pool$name))>1)))
if(length(dupSalary) > 0) {salary = salary[-dupSalary,]}
if(length(dupPool) > 0){ data_pool = data_pool[-dupPool,]}
data_pool = data_pool[which(toupper(data_pool$name) %in% toupper(salary$name)),]
salary = salary[which(toupper(salary$name) %in% toupper(data_pool$name)),]
data_pool = data_pool[order(data_pool$name),]
data_pool[which(data_pool$name == "Tyler Toffoli"),]
salary = salary[order(salary$name),]
data.frame(salary$name,data_pool$name)
data_pool$caphit = as.numeric(salary$salary)
data_pool$pos = salary$pos
data_pool$team = salary$team
#ppg = as.numeric(data_pool$pts)/as.numeric(data_pool$pj)
ppg = as.numeric(data_pool$pts10)/as.numeric(data_pool$pj10)
data_pool=cbind(data_pool,ppg)
head(data_pool,n=100)
alignment = read.csv("~/Documents/pool/alignment.csv",stringsAsFactors = FALSE)
alignment$name = gsub(pattern = " $",replacement = "",x = alignment$name)
alignment = alignment[1:19,]
# ajouter prÃ©vision selon match restant
calendar = read.csv(file = "~/Documents/pool/calendar.tsv", sep = "\t")
year = as.numeric(gsub(pattern = "-.*","",x = calendar$Date))
month = as.numeric(gsub(pattern = "20[21][0-9]-","",x = gsub(pattern = "-[0-9]*$","",calendar$Date)))
day = as.numeric(gsub(pattern = "20[12][0-9]-[0-9]*-","",calendar$Date))
calendar = cbind(calendar,year,month,day)
m1 = 2
day1 = 27
V = table(calendar$Visitor[which((calendar$month==m1 & calendar$day >= day1))])
H =table(calendar$Home[which((calendar$month==m1 & calendar$day >= day1))])
grem1 = V+H
grem1[order(grem1)]
tm = unique(data_pool$team)
tm = tm[order(tm)]
tm = tm[c(1:4,7,5,8,9,6,10:16,18,17,19:31)]
grem1 = data.frame(grem1,tm,1:31,stringsAsFactors = FALSE)
grem1
m2 = 3
day2 = 1
V = table(calendar$Visitor[which((calendar$month==m1 & calendar$day >= day1)|(calendar$month==m2 & calendar$day >= day2))])
H =table(calendar$Home[which((calendar$month==m1 & calendar$day >= day1)|(calendar$month==m2 & calendar$day >= day2))])
grem = V+H
grem[order(grem)]
tm = unique(data_pool$team)
tm = tm[order(tm)]
tm = tm[c(1:4,7,5,8,9,6,10:16,18,17,19:31)]
grem = data.frame(grem,tm,1:31,stringsAsFactors = FALSE)
grem
data_pool[which(data_pool$name == "Tyler Toffoli"),]
game = 60
proj = apply(X = data_pool,MARGIN = 1,FUN = function(x){
ind = which(grem$tm == x[8])
if(x[7] == "G"){return(as.numeric(x[9])*(as.numeric(grem[ind,2])*(as.numeric(x[2])/game)))}
if(length(ind) == 0){print(x)}
return(as.numeric(x[9])*as.numeric(grem[ind,2]))
})
proj = unlist(proj)
data_pool$proj = proj
data_pool[which(data_pool$name == "Tyler Toffoli"),]
head(data_pool)
#data_pool$proj[which(data_pool$name %in% c("Marc-Andre Fleury"))] = 100
#data_pool$proj[which(data_pool$name %in% c("Tristan Jarry"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Sebastian Aho"))] = -68
data_pool$proj[which(data_pool$name %in% c("Neal Pionk"))] = -100
gpm = matrix(0,nrow=31,ncol=7)
a=1
for(i in c(10:12,1:4)){
V = table(calendar$Visitor[which(calendar$month==i)])
H =table(calendar$Home[which(calendar$month==i)])
oct = V+H
gpm[,a] = oct
a = a + 1
}
colnames(gpm) = as.character(c(10:12,1:4))
rownames(gpm) = names(oct)
gpm = data.frame(gpm)
plot(0,0, ylim=c(9,17),xlim =c(1,7),xaxt='n')
axis(side = 1,at = 1:7,labels = c("Oct","Nov","Dec","Jan","Fev","Mar","Avr"))
apply(X = gpm,MARGIN = 1,lines)
filter(tab, name == "Tyler Toffoli")
filter(tab, Player == "Tyler Toffoli")
tab = inner_join(tab,data_pool[,c('name','caphit','pos')],by = c("Player" = "name"))
tab = mutate(tab, pp100k = (as.numeric(Total.Points.y) / as.numeric(GP.y) * 82) / (caphit/100000))
tab = mutate(tab, TOIPG = as.numeric(TOI.y) / as.numeric(GP.y))
tab = inner_join(tab,tabpp[,c('Player','ppshare')], by = 'Player')
filter(tab, Player == "Tyler Toffoli")
library(htmltab)
library(readxl)
library(DT)
library(dplyr)
library(htmlwidgets)
library(Rglpk)
setwd("~/Documents/pool/Lafond-Lapalmej.github.io")
stats_last10 = "https://www.naturalstattrick.com/playerteams.php?fromseason=20192020&thruseason=20192020&stype=2&sit=all&score=all&stdoi=std&rate=n&team=ALL&pos=S&loc=B&toi=0&gpfilt=gpteam&fd=&td=&tgp=10&lines=single&draftteam=ALL"
stats = "https://www.naturalstattrick.com/playerteams.php?fromseason=20192020&thruseason=20192020&stype=2&sit=all&score=all&stdoi=std&rate=n&team=ALL&pos=S&loc=B&toi=0&gpfilt=none&fd=&td=&tgp=10&lines=single&draftteam=ALL"
webg = "https://www.hockey-reference.com/leagues/NHL_2020_goalies.html"
pp = "https://www.naturalstattrick.com/playerteams.php?fromseason=20192020&thruseason=20192020&stype=2&sit=pp&score=all&stdoi=std&rate=n&team=ALL&pos=S&loc=B&toi=0&gpfilt=none&fd=&td=&tgp=410&lines=single&draftteam=ALL"
pp10 = "https://www.naturalstattrick.com/playerteams.php?fromseason=20192020&thruseason=20192020&stype=2&sit=pp&score=all&stdoi=std&rate=n&team=ALL&pos=S&loc=B&toi=0&gpfilt=gpteam&fd=&td=&tgp=10&lines=single&draftteam=ALL"
teampp10 = "https://www.naturalstattrick.com/teamtable.php?fromseason=20192020&thruseason=20192020&stype=2&sit=pp&score=all&rate=n&team=all&loc=B&gpf=10&fd=&td="
#nhl.last10 = htmltab(doc = stats_last10, which =1)
#nhl.tab = htmltab(doc = stats, which = 1)
#nhl.pp = htmltab(doc = pp, which = 1)
#nhl.pp10 = htmltab(doc = pp10, which = 1)
#nhl.teampp10 = htmltab(doc = teampp10, which = 1)
#nhl.g = htmltab(doc = webg,which = 1)
tab=data.frame(nhl.tab, stringsAsFactors = FALSE)
tab10 = data.frame(nhl.last10, stringsAsFactors = FALSE)
tabg = data.frame(nhl.g, stringsAsFactors = FALSE)
tabg = filter(tabg, SA != "SA")
tabpp = data.frame(nhl.pp, stringsAsFactors = FALSE)
tabpp10 = data.frame(nhl.pp10, stringsAsFactors = FALSE)
teampp10 = data.frame(nhl.teampp10, stringsAsFactors = FALSE)
teamname = c('Anaheim Ducks','Arizona Coyotes','Boston Bruins','Buffalo Sabres',
'Carolina Hurricanes','Columbus Blue Jackets','Calgary Flames','Chicago Blackhawks',
'Colorado Avalanche','Dallas Stars','Detroit Red Wings','Edmonton Oilers',
'Florida Panthers','Los Angeles Kings','Minnesota Wild','Montreal Canadiens',
'New Jersey Devils','Nashville Predators','New York Islanders','New York Rangers',
'Ottawa Senators','Philadelphia Flyers','Pittsburgh Penguins','San Jose Sharks',
'St Louis Blues','Tampa Bay Lightning','Toronto Maple Leafs','Vancouver Canucks',
'Vegas Golden Knights','Winnipeg Jets','Washington Capitals' )
teamab =  c('ANA','ARI','BOS','BUF','CAR','CBJ','CGY','CHI','COL','DAL','DET','EDM','FLA',
'L.A','MIN','MTL','N.J','NSH','NYI','NYR','OTT','PHI','PIT','S.J','STL',
'T.B','TOR','VAN','VGK','WPG','WSH')
names(teamab) = teamname
teampp10$Team = teamab[teampp10$Team]
tabpp10 = inner_join(tabpp10,teampp10,by = 'Team')
tab = inner_join(tab,tab10, by = "Player")
tabpp = inner_join(tabpp, tabpp10, by = "Player")
head(tabpp)
pj_min = 5
tab = filter(tab,as.numeric(GP.x)>=pj_min)
tabg = filter(tabg, as.numeric(Goalie.Stats....GP) >= pj_min)
tabpp = filter(tabpp,as.numeric(GP)>=pj_min)
tabpp = mutate(tabpp, ppshare = (as.numeric(TOI.x)/as.numeric(GP.x)) / (as.numeric(TOI.y)/as.numeric(GP.y)) * 100)
tabg = mutate(tabg,pg = 2 * as.numeric(tabg$Goalie.Stats....W)+ 2* as.numeric(tabg$Goalie.Stats....SO) + as.numeric(tabg$Goalie.Stats....T.O))
data_pool = cbind(tab$Player,tab$GP.x,tab$Total.Points.x,tab$GP.y,tab$Total.Points.y)
data_pool = rbind(data_pool,cbind(tabg$Player,tabg$Goalie.Stats....GP,tabg$pg,tabg$Goalie.Stats....GP,tabg$pg))
colnames(data_pool) = c("name" ,"pj", "pts","pj10","pts10")
data_pool = data.frame(data_pool,stringsAsFactors = FALSE)
data_pool$name[which(data_pool$name == "Evgenii Dadonov")] = "Evgeny Dadonov"
data_pool$name[which(data_pool$name == "Artemi Panarin")] = "Artemy Panarin"
data_pool$name[which(data_pool$name == "TJ Brodie")] = "T.J. Brodie"
data_pool$name[which(data_pool$name == "Alex Nylander")] = "Alexander Nylander"
data_pool$name[which(data_pool$name == "Matt Dumba")] = "Mathew Dumba"
data_pool$name[which(data_pool$name == "Tony DeAngelo")] = "Anthony DeAngelo"
data_pool$name[which(data_pool$name == "Zach Werenski")] = "Zachary Werenski"
data_pool[which(data_pool$name == "Tyler Toffoli"),]
tab$Player[which(tab$Player == "Evgenii Dadonov")] = "Evgeny Dadonov"
tab$Player[which(tab$Player == "Artemi Panarin")] = "Artemy Panarin"
tab$Player[which(tab$Player == "TJ Brodie")] = "T.J. Brodie"
tab$Player[which(tab$Player == "Alex Nylander")] = "Alexander Nylander"
tab$Player[which(tab$Player == "Matt Dumba")] = "Mathew Dumba"
tab$Player[which(tab$Player == "Tony DeAngelo")] = "Anthony DeAngelo"
tab$Player[which(tab$Player == "Zach Werenski")] = "Zachary Werenski"
tabpp$Player[which(tabpp$Player == "Evgenii Dadonov")] = "Evgeny Dadonov"
tabpp$Player[which(tabpp$Player == "Artemi Panarin")] = "Artemy Panarin"
tabpp$Player[which(tabpp$Player == "TJ Brodie")] = "T.J. Brodie"
tabpp$Player[which(tabpp$Player == "Alex Nylander")] = "Alexander Nylander"
tabpp$Player[which(tabpp$Player == "Matt Dumba")] = "Mathew Dumba"
tabpp$Player[which(tabpp$Player == "Tony DeAngelo")] = "Anthony DeAngelo"
tabpp$Player[which(tabpp$Player == "Zach Werenski")] = "Zachary Werenski"
# get new salary
salary = read_excel("~/Documents/pool/liste_final_1920.xlsx", sheet = 1)
salary = data.frame(salary)
#salary$pos[which(salary$pos == "GAR")] = "G"
salary$pos[which(salary$pos == "CA")] = "HQ"
ind_sal = which(toupper(salary$name) %in% toupper(data_pool$name))
salary$name[-ind_sal]
ind_pool = which(toupper(data_pool$name) %in% toupper(salary$name))
data_pool$name[-ind_pool]
#data_pool[grepl(x=data_pool$name,pattern = "Mat"),]
#salary = salary[-which(salary$Name %in% c("Tyson Barrie")),]
dupSalary = which(salary$name == names(which(table(factor(salary$name)) > 1)))
dupPool = which(data_pool$name == names(which(table(factor(data_pool$name))>1)))
if(length(dupSalary) > 0) {salary = salary[-dupSalary,]}
if(length(dupPool) > 0){ data_pool = data_pool[-dupPool,]}
data_pool = data_pool[which(toupper(data_pool$name) %in% toupper(salary$name)),]
salary = salary[which(toupper(salary$name) %in% toupper(data_pool$name)),]
data_pool = data_pool[order(data_pool$name),]
#data_pool = data_pool[-which(duplicated(data_pool$name)),]
salary = salary[order(salary$name),]
data.frame(salary$name,data_pool$name)
data_pool$caphit = as.numeric(salary$salary)
data_pool$pos = salary$pos
data_pool$team = salary$team
#ppg = as.numeric(data_pool$pts)/as.numeric(data_pool$pj)
ppg = as.numeric(data_pool$pts10)/as.numeric(data_pool$pj10)
data_pool=cbind(data_pool,ppg)
head(data_pool,n=100)
#data_pool = data_pool[-which(data_pool$team == "UFA"),]
#data_pool$team[which(data_pool$team == "MTL")] = "MON"
#data_pool$caphit = as.numeric(gsub(pattern = ",| |\\$","",data_pool$caphit))
alignment = read.csv("~/Documents/pool/alignment.csv",stringsAsFactors = FALSE)
alignment$name = gsub(pattern = " $",replacement = "",x = alignment$name)
alignment = alignment[1:19,]
# ajouter prÃ©vision selon match restant
calendar = read.csv(file = "~/Documents/pool/calendar.tsv", sep = "\t")
year = as.numeric(gsub(pattern = "-.*","",x = calendar$Date))
month = as.numeric(gsub(pattern = "20[21][0-9]-","",x = gsub(pattern = "-[0-9]*$","",calendar$Date)))
day = as.numeric(gsub(pattern = "20[12][0-9]-[0-9]*-","",calendar$Date))
calendar = cbind(calendar,year,month,day)
m1 = 2
day1 = 27
V = table(calendar$Visitor[which((calendar$month==m1 & calendar$day >= day1))])
H =table(calendar$Home[which((calendar$month==m1 & calendar$day >= day1))])
grem1 = V+H
grem1[order(grem1)]
tm = unique(data_pool$team)
tm = tm[order(tm)]
tm = tm[c(1:4,7,5,8,9,6,10:16,18,17,19:31)]
grem1 = data.frame(grem1,tm,1:31,stringsAsFactors = FALSE)
grem1
m2 = 3
day2 = 1
V = table(calendar$Visitor[which((calendar$month==m1 & calendar$day >= day1)|(calendar$month==m2 & calendar$day >= day2))])
H =table(calendar$Home[which((calendar$month==m1 & calendar$day >= day1)|(calendar$month==m2 & calendar$day >= day2))])
grem = V+H
grem[order(grem)]
tm = unique(data_pool$team)
tm = tm[order(tm)]
tm = tm[c(1:4,7,5,8,9,6,10:16,18,17,19:31)]
grem = data.frame(grem,tm,1:31,stringsAsFactors = FALSE)
grem
game = 60
proj = apply(X = data_pool,MARGIN = 1,FUN = function(x){
ind = which(grem$tm == x[8])
if(x[7] == "G"){return(as.numeric(x[9])*(as.numeric(grem[ind,2])*(as.numeric(x[2])/game)))}
if(length(ind) == 0){print(x)}
return(as.numeric(x[9])*as.numeric(grem[ind,2]))
})
proj = unlist(proj)
data_pool$proj = proj
head(data_pool)
#data_pool$proj[which(data_pool$name %in% c("Marc-Andre Fleury"))] = 100
#data_pool$proj[which(data_pool$name %in% c("Tristan Jarry"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Sebastian Aho"))] = -68
data_pool$proj[which(data_pool$name %in% c("Neal Pionk"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Anthony DeAngelo"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Victor Hedman"))] = 100
#data_pool$proj[which(data_pool$name %in% c("Phillip Danault"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Oliver Bjorkstrand"))] = 100
#data_pool$proj[which(data_pool$name %in% c("Pavel Zacha"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Brayden Schenn"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Mark Giordano"))] = -150
#data_pool$proj[which(data_pool$name %in% c("Matt Niskanen"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Mike Reilly"))] = -100
#data_pool$proj[which(data_pool$name %in% c("David Perron"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Nikita Kucherov"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Steven Stamkos"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Kailer Yamamoto"))] = -150
#data_pool$proj[which(data_pool$name %in% c("Logan Brown"))] = -100
#data_pool$proj[which(data_pool$name %in% c("Leon Draisaitl"))] = -100
gpm = matrix(0,nrow=31,ncol=7)
a=1
for(i in c(10:12,1:4)){
V = table(calendar$Visitor[which(calendar$month==i)])
H =table(calendar$Home[which(calendar$month==i)])
oct = V+H
gpm[,a] = oct
a = a + 1
}
colnames(gpm) = as.character(c(10:12,1:4))
rownames(gpm) = names(oct)
gpm = data.frame(gpm)
plot(0,0, ylim=c(9,17),xlim =c(1,7),xaxt='n')
axis(side = 1,at = 1:7,labels = c("Oct","Nov","Dec","Jan","Fev","Mar","Avr"))
apply(X = gpm,MARGIN = 1,lines)
filter(tab,Player == "Tyler Toffoli")
filter(data_pool, name == "Tyler Toffoli")
tab = inner_join(tab,data_pool[,c('name','caphit','pos')],by = c("Player" = "name"))
filter(tab,Player == "Tyler Toffoli")
tabpp
filter(tabpp, Player == "Tyler Toffoli")
library(htmltab)
library(readxl)
library(DT)
library(dplyr)
library(htmlwidgets)
library(Rglpk)
setwd("~/Documents/pool/Lafond-Lapalmej.github.io")
stats_last10 = "https://www.naturalstattrick.com/playerteams.php?fromseason=20192020&thruseason=20192020&stype=2&sit=all&score=all&stdoi=std&rate=n&team=ALL&pos=S&loc=B&toi=0&gpfilt=gpteam&fd=&td=&tgp=10&lines=single&draftteam=ALL"
stats = "https://www.naturalstattrick.com/playerteams.php?fromseason=20192020&thruseason=20192020&stype=2&sit=all&score=all&stdoi=std&rate=n&team=ALL&pos=S&loc=B&toi=0&gpfilt=none&fd=&td=&tgp=10&lines=single&draftteam=ALL"
webg = "https://www.hockey-reference.com/leagues/NHL_2020_goalies.html"
pp = "https://www.naturalstattrick.com/playerteams.php?fromseason=20192020&thruseason=20192020&stype=2&sit=pp&score=all&stdoi=std&rate=n&team=ALL&pos=S&loc=B&toi=0&gpfilt=none&fd=&td=&tgp=410&lines=single&draftteam=ALL"
pp10 = "https://www.naturalstattrick.com/playerteams.php?fromseason=20192020&thruseason=20192020&stype=2&sit=pp&score=all&stdoi=std&rate=n&team=ALL&pos=S&loc=B&toi=0&gpfilt=gpteam&fd=&td=&tgp=10&lines=single&draftteam=ALL"
teampp10 = "https://www.naturalstattrick.com/teamtable.php?fromseason=20192020&thruseason=20192020&stype=2&sit=pp&score=all&rate=n&team=all&loc=B&gpf=10&fd=&td="
#nhl.last10 = htmltab(doc = stats_last10, which =1)
#nhl.tab = htmltab(doc = stats, which = 1)
#nhl.pp = htmltab(doc = pp, which = 1)
#nhl.pp10 = htmltab(doc = pp10, which = 1)
#nhl.teampp10 = htmltab(doc = teampp10, which = 1)
#nhl.g = htmltab(doc = webg,which = 1)
tab=data.frame(nhl.tab, stringsAsFactors = FALSE)
tab10 = data.frame(nhl.last10, stringsAsFactors = FALSE)
tabg = data.frame(nhl.g, stringsAsFactors = FALSE)
tabg = filter(tabg, SA != "SA")
tabpp = data.frame(nhl.pp, stringsAsFactors = FALSE)
tabpp10 = data.frame(nhl.pp10, stringsAsFactors = FALSE)
teampp10 = data.frame(nhl.teampp10, stringsAsFactors = FALSE)
teamname = c('Anaheim Ducks','Arizona Coyotes','Boston Bruins','Buffalo Sabres',
'Carolina Hurricanes','Columbus Blue Jackets','Calgary Flames','Chicago Blackhawks',
'Colorado Avalanche','Dallas Stars','Detroit Red Wings','Edmonton Oilers',
'Florida Panthers','Los Angeles Kings','Minnesota Wild','Montreal Canadiens',
'New Jersey Devils','Nashville Predators','New York Islanders','New York Rangers',
'Ottawa Senators','Philadelphia Flyers','Pittsburgh Penguins','San Jose Sharks',
'St Louis Blues','Tampa Bay Lightning','Toronto Maple Leafs','Vancouver Canucks',
'Vegas Golden Knights','Winnipeg Jets','Washington Capitals' )
teamab =  c('ANA','ARI','BOS','BUF','CAR','CBJ','CGY','CHI','COL','DAL','DET','EDM','FLA',
'L.A','MIN','MTL','N.J','NSH','NYI','NYR','OTT','PHI','PIT','S.J','STL',
'T.B','TOR','VAN','VGK','WPG','WSH')
names(teamab) = teamname
teampp10$Team = teamab[teampp10$Team]
tabpp10 = inner_join(tabpp10,teampp10,by = 'Team')
tab = inner_join(tab,tab10, by = "Player")
tabpp = inner_join(tabpp, tabpp10, by = "Player")
head(tabpp)
pj_min = 5
tab = filter(tab,as.numeric(GP.x)>=pj_min)
tabg = filter(tabg, as.numeric(Goalie.Stats....GP) >= pj_min)
tabpp = filter(tabpp,as.numeric(GP)>=pj_min)
tabpp = mutate(tabpp, ppshare = (as.numeric(TOI.x)/as.numeric(GP.x)) / (as.numeric(TOI.y)/as.numeric(GP.y)) * 100)
tabg = mutate(tabg,pg = 2 * as.numeric(tabg$Goalie.Stats....W)+ 2* as.numeric(tabg$Goalie.Stats....SO) + as.numeric(tabg$Goalie.Stats....T.O))
data_pool = cbind(tab$Player,tab$GP.x,tab$Total.Points.x,tab$GP.y,tab$Total.Points.y)
data_pool = rbind(data_pool,cbind(tabg$Player,tabg$Goalie.Stats....GP,tabg$pg,tabg$Goalie.Stats....GP,tabg$pg))
colnames(data_pool) = c("name" ,"pj", "pts","pj10","pts10")
data_pool = data.frame(data_pool,stringsAsFactors = FALSE)
data_pool$name[which(data_pool$name == "Evgenii Dadonov")] = "Evgeny Dadonov"
data_pool$name[which(data_pool$name == "Artemi Panarin")] = "Artemy Panarin"
data_pool$name[which(data_pool$name == "TJ Brodie")] = "T.J. Brodie"
data_pool$name[which(data_pool$name == "Alex Nylander")] = "Alexander Nylander"
data_pool$name[which(data_pool$name == "Matt Dumba")] = "Mathew Dumba"
data_pool$name[which(data_pool$name == "Tony DeAngelo")] = "Anthony DeAngelo"
data_pool$name[which(data_pool$name == "Zach Werenski")] = "Zachary Werenski"
tab$Player[which(tab$Player == "Evgenii Dadonov")] = "Evgeny Dadonov"
tab$Player[which(tab$Player == "Artemi Panarin")] = "Artemy Panarin"
tab$Player[which(tab$Player == "TJ Brodie")] = "T.J. Brodie"
tab$Player[which(tab$Player == "Alex Nylander")] = "Alexander Nylander"
tab$Player[which(tab$Player == "Matt Dumba")] = "Mathew Dumba"
tab$Player[which(tab$Player == "Tony DeAngelo")] = "Anthony DeAngelo"
tab$Player[which(tab$Player == "Zach Werenski")] = "Zachary Werenski"
tabpp$Player[which(tabpp$Player == "Evgenii Dadonov")] = "Evgeny Dadonov"
tabpp$Player[which(tabpp$Player == "Artemi Panarin")] = "Artemy Panarin"
tabpp$Player[which(tabpp$Player == "TJ Brodie")] = "T.J. Brodie"
tabpp$Player[which(tabpp$Player == "Alex Nylander")] = "Alexander Nylander"
tabpp$Player[which(tabpp$Player == "Matt Dumba")] = "Mathew Dumba"
tabpp$Player[which(tabpp$Player == "Tony DeAngelo")] = "Anthony DeAngelo"
tabpp$Player[which(tabpp$Player == "Zach Werenski")] = "Zachary Werenski"
tab=data.frame(nhl.tab, stringsAsFactors = FALSE)
tab10 = data.frame(nhl.last10, stringsAsFactors = FALSE)
tabg = data.frame(nhl.g, stringsAsFactors = FALSE)
tabg = filter(tabg, SA != "SA")
tabpp = data.frame(nhl.pp, stringsAsFactors = FALSE)
tabpp10 = data.frame(nhl.pp10, stringsAsFactors = FALSE)
teampp10 = data.frame(nhl.teampp10, stringsAsFactors = FALSE)
filter(tabpp, Player=="Tyler Toffoli")
teamname = c('Anaheim Ducks','Arizona Coyotes','Boston Bruins','Buffalo Sabres',
'Carolina Hurricanes','Columbus Blue Jackets','Calgary Flames','Chicago Blackhawks',
'Colorado Avalanche','Dallas Stars','Detroit Red Wings','Edmonton Oilers',
'Florida Panthers','Los Angeles Kings','Minnesota Wild','Montreal Canadiens',
'New Jersey Devils','Nashville Predators','New York Islanders','New York Rangers',
'Ottawa Senators','Philadelphia Flyers','Pittsburgh Penguins','San Jose Sharks',
'St Louis Blues','Tampa Bay Lightning','Toronto Maple Leafs','Vancouver Canucks',
'Vegas Golden Knights','Winnipeg Jets','Washington Capitals' )
teamab =  c('ANA','ARI','BOS','BUF','CAR','CBJ','CGY','CHI','COL','DAL','DET','EDM','FLA',
'L.A','MIN','MTL','N.J','NSH','NYI','NYR','OTT','PHI','PIT','S.J','STL',
'T.B','TOR','VAN','VGK','WPG','WSH')
names(teamab) = teamname
teampp10$Team = teamab[teampp10$Team]
tabpp10 = inner_join(tabpp10,teampp10,by = 'Team')
tab = inner_join(tab,tab10, by = "Player")
tabpp = inner_join(tabpp, tabpp10, by = "Player")
filter(tabpp, Player=="Tyler Toffoli")
unlist(strsplit(tabpp10$Team, ",")[1,])
unlist(strsplit(tabpp10$Team, ","))
unlist(strsplit(tabpp10$Team, ",")[,1])
unlist(strsplit(tabpp10$Team, ",")[1])
unlist(data.frame(strsplit(tabpp10$Team, ","))[1,])
source('~/Documents/pool/pool_UNIQUE2.R', echo=TRUE)
filter(tab, Player == "Tyler Toffoli")
source('~/Documents/pool/pool_UNIQUE2.R', echo=TRUE)
source('~/Documents/pool/pool_UNIQUE2.R', echo=TRUE)
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width))
# Exercice 2
iris <- read.csv(file = "~/datasets/iris.csv")
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width))
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width)) +
geom_point()
# Charger les packages
library(dplyr)
library(ggplot2)
# Exercice 1
data_workshop <- read.csv("~/datasets/data_workshop.csv")
# Initialiser le graphique
ggplot(data_workshop, mapping = aes(x = nb_car, y = nb_pet))
# Ajouter une couche: Points
ggplot(data_workshop, mapping = aes(x = nb_car, y = nb_pet)) + geom_point()
# Ajouter une couche: Ligne de rÃ©gression
ggplot(data_workshop, mapping = aes(x = nb_car, y = nb_pet)) + geom_point() + geom_smooth(method = "lm")
# Modifier une couche: Couleur des points
ggplot(data_workshop, mapping = aes(x = nb_car, y = nb_pet)) + geom_point(aes(col = writing_hand)) + geom_smooth(method = "lm")
# Modifier une couche: SÃ©parer le graphique par couleur
ggplot(data_workshop, mapping = aes(x = nb_car, y = nb_pet)) + geom_point(aes(col = writing_hand)) + geom_smooth(method = "lm") + facet_wrap(~writing_hand)
# Ajouter une couche: Titre et nom des axes
ggplot(data_workshop, mapping = aes(x = nb_car, y = nb_pet)) +
geom_point(aes(col = writing_hand)) +
geom_smooth(method = "lm") +
facet_wrap(~writing_hand) +
labs(title = "RÃ©gression LinÃ©aire", x = "Nombre d'animaux", y = "Nombre d'automobiles", col = NULL )
# Exercice 2
iris <- read.csv(file = "~/datasets/iris.csv")
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width))
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width)) +
geom_point()
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width, col = species)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width, col = Species)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width, col = Species)) +
geom_point() +
geom_smooth(method = 'lm') +
facet_wrap(~Species)
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width, col = Species)) +
geom_point() +
geom_smooth(method = 'lm') +
facet_wrap(~Species, scale = 'free_x')
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Petal.Width, col = Species)) +
geom_point() +
geom_smooth(method = 'lm') +
facet_wrap(~Species, scale = 'free_x') +
labs(title = "Regression Iris", x = "Sepal width", y = "Petal width")
metageno_df <- read.csv(file = "~/datasets/metageno.csv")
metageno_df$rep <-  as.factor(metageno_df$rep)
ggplot(data = metageno_df, mapping = aes(x = tr)) + geom_bar(mapping = aes(weight = count))
ggplot(data = metageno_df, mapping = aes(x = tr)) + geom_bar(mapping = aes(weight = count, col = Kingdom))
ggplot(data = data_workshop, mapping = aes(x = nb_car, y = nb_pet, fill = gender)) +
geom_point() + theme_classic()
ggplot(data = metageno_df, mapping = aes(x = tr)) +
geom_bar(mapping = aes(weight = count, fill = Kingdom))
nematoda_df <- metageno_df %>%
filter(Phylum == "nematoda") %>%
filter(count > 0)
ggplot(data = nematoda_df, mapping = aes(x = tr)) +
geom_bar(mapping = aes(weight = count))
ggplot(data = nematoda_df, mapping = aes(x = tr)) +
geom_bar(mapping = aes(weight = count, fill = order))
ggplot(data = nematoda_df, mapping = aes(x = tr)) +
geom_bar(mapping = aes(weight = count, fill = Order))
ggplot(data = nematoda_df, mapping = aes(x = tr)) +
geom_bar(mapping = aes(weight = count, fill = Order), position = 'fill')
ggplot(data = nematoda_df, mapping = aes(x = tr, y = count)) +
scale_y_log10() +
geom_violin() +
geom_jitter(mapping = aes(col = Order), height = 0, width = 0.25, size = 0.7)
# Entrer les chemins vers les fichiers
path_to_vignes_2019 <- "~/datasets/vignes_2019.xlsx"
path_to_station_qc_2019 <- "~/datasets/station_qc_2019.csv"
library(readxl)
# Entrer les chemins vers les fichiers
path_to_vignes_2019 <- "~/datasets/vignes_2019.xlsx"
path_to_station_qc_2019 <- "~/datasets/station_qc_2019.csv"
# Charger le fichier excel vignes_2019
vigne2019 <- read_excel(path_to_vignes_2019,
col_types = c("numeric", "date", "text",
"numeric", "numeric", "text", "numeric",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text", "text", "text", "text", "text",
"text"),na = "None")
stationQc2019 <- read.csv("/media/common/workshop_r/datasets/station_qc_2019.csv")
View(vigne2019)
View(stationQc2019)
# Fonction pour trouver la station la plus proche d'une observation
closest_station <- function(data){
distMin <- 1000
stationMin <-"na"
lat = as.numeric(data[5])
lon = as.numeric(data[4])
if(is.na(lat) || is.na(lon)){return(stationMin)}
for(i in 1:nrow(stationQc2019)){
dist <- sqrt((stationQc2019$Lat[i]-lat)^2 + (stationQc2019$Lon[i]-lon)^2)
if(dist < distMin){
stationMin = as.character(stationQc2019$Nom[i])
distMin <- dist
}
}
return(stationMin)
}
vigne2019[201,1:6]
closest_station(vigne2019[201,])
stationVigne <- apply(vigne2019,MARGIN = 1, FUN = closest_station)
vigne2019 <- mutate(vigne2019, station_nom = stationVigne)
colnames(vigne2019)
vigne2019 <- vigne2019[,c(1:5,39,6:38)]
head(vigne2019)
